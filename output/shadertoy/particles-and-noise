// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
// Author: Brandon Fogerty
// Source: https://www.shadertoy.com/view/4tX3Rf#

// Modified to work with chromesthesia

// Particles + Noise Part 2
// By: Brandon Fogerty
// bfogerty at gmail dot com

#define Resolution              iResolution
#define Time                    iGlobalTime

#define HorizontalAmplitude     0.30
#define VerticleAmplitude       0.20
#define HorizontalSpeed         0.90
#define VerticleSpeed           1.50
#define ParticleMinSize         1.76
#define ParticleMaxSize         1.61
#define ParticleBreathingSpeed      1.30
#define ParticleColorChangeSpeed    1.70
#define ParticleCount           2.0
#define ParticleColor1          vec3(9.0, 5.0, 3.0)
#define ParticleColor2          vec3(1.0, 3.0, 9.0)


float hash( float x )
{
    return fract( sin( x ) * 43758.5453 );
}

float noise( vec2 uv )  // Thanks Inigo Quilez
{
    vec3 x = vec3( uv.xy, 0.0 );

    vec3 p = floor( x );
    vec3 f = fract( x );

    f = f*f*(3.0 - 2.0*f);

    float offset = 57.0;

    float n = dot( p, vec3(1.0, offset, offset*2.0) );


    return mix( mix(    mix( hash( n + 0.0 ),       hash( n + 1.0 ), f.x ),
                        mix( hash( n + offset),     hash( n + offset+1.0), f.x ), f.y ),
                mix(    mix( hash( n + offset*2.0), hash( n + offset*2.0+1.0), f.x),
                        mix( hash( n + offset*3.0), hash( n + offset*3.0+1.0), f.x), f.y), f.z);
}

float snoise( vec2 uv )
{
    return noise( uv ) * 2.0 - 1.0;
}


float perlinNoise( vec2 uv )
{
    float n =       noise( uv * 1.0 )   * 128.0 +
                noise( uv * 2.0 )   * 64.0 +
                noise( uv * 4.0 )   * 32.0 +
                noise( uv * 8.0 )   * 16.0 +
                noise( uv * 16.0 )  * 8.0 +
                noise( uv * 32.0 )  * 4.0 +
                noise( uv * 64.0 )  * 2.0 +
                noise( uv * 128.0 ) * 1.0;

    float noiseVal = n / ( 1.0 + 2.0 + 4.0 + 8.0 + 16.0 + 32.0 + 64.0 + 128.0 );
    noiseVal = abs(noiseVal * 2.0 - 1.0);

    return  noiseVal;
}

float fBm( vec2 uv, float lacunarity, float gain )
{
    float sum = 0.0;
    float amp = 5.0;

    amp = 5 + texture2D(iChannel0, vec2(-.85, .75)).x * 10;

    for( int i = 0; i < 2; ++i )
    {
        sum += ( perlinNoise( uv ) ) * amp;
        amp *= gain;
        uv *= lacunarity;
    }

    return sum;
}

vec3 particles( vec2 pos )
{

    vec3 c = vec3( 0, 0, 0 );

    float noiseFactor = fBm( pos, 0.01, 0.1);

    for( float i = 1.0; i < ParticleCount+1.0; ++i )
    {
        float cs = cos( Time * HorizontalSpeed * (i/ParticleCount) + noiseFactor ) * HorizontalAmplitude;
        float ss = sin( Time * VerticleSpeed   * (i/ParticleCount) + noiseFactor ) * VerticleAmplitude;
        vec2 origin = vec2( cs , ss );

        float t = sin( Time * ParticleBreathingSpeed * i ) * 0.5 + 0.5;
        float particleSize = mix( ParticleMinSize, ParticleMaxSize, t );
        float d = clamp( sin( length( pos - origin )  + particleSize ), 0.0, particleSize);

        float t2 = sin( Time * ParticleColorChangeSpeed * i ) * 0.5 + 0.5;
        vec3 color = mix( ParticleColor1, ParticleColor2, t2 );
        c += color * pow( d, 10.0 );
    }

    return c;
}

void main( void )
{
    vec2 uv = ( gl_FragCoord.xy / Resolution.xy ) * 2.0 - 1.0;
    uv.x *= ( Resolution.x / Resolution.y );

    vec3 finalColor = particles( sin( abs(uv) ) );

    gl_FragColor = vec4( finalColor, 1.0 );
}
